// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "go-todo/models"

	mock "github.com/stretchr/testify/mock"
)

// TodoServiceInterface is an autogenerated mock type for the TodoServiceInterface type
type TodoServiceInterface struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: todo
func (_m *TodoServiceInterface) CreateTodo(todo *models.Todo) error {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for CreateTodo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTodoById provides a mock function with given fields: todo, id
func (_m *TodoServiceInterface) DeleteTodoById(todo *models.Todo, id string) error {
	ret := _m.Called(todo, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTodoById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo, string) error); ok {
		r0 = rf(todo, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTodos provides a mock function with no fields
func (_m *TodoServiceInterface) GetAllTodos() ([]models.Todo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTodos")
	}

	var r0 []models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Todo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoById provides a mock function with given fields: todo, id
func (_m *TodoServiceInterface) GetTodoById(todo *models.Todo, id string) (models.Todo, error) {
	ret := _m.Called(todo, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTodoById")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Todo, string) (models.Todo, error)); ok {
		return rf(todo, id)
	}
	if rf, ok := ret.Get(0).(func(*models.Todo, string) models.Todo); ok {
		r0 = rf(todo, id)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(*models.Todo, string) error); ok {
		r1 = rf(todo, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodoById provides a mock function with given fields: todo, id
func (_m *TodoServiceInterface) UpdateTodoById(todo *models.Todo, id string) error {
	ret := _m.Called(todo, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodoById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo, string) error); ok {
		r0 = rf(todo, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoServiceInterface creates a new instance of TodoServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoServiceInterface {
	mock := &TodoServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
